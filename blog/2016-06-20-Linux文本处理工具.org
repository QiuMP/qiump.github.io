#+TITLE: Linux文本处理工具
#+DATE: 2016-06-20
#+SETUPFILE: ~/myblog/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: Linux
#+JEKYLL_TAGS: Linux 运维 文本处理
#+JEKYLL_PUBLISHED: true

TODO



----- 
* 文本处理工具
** head, tail
#+BEGIN_SRC conf
head [OPTION]... [FILE]...  # 读取文件头
  -c num: 指定获取前num字节
  -n num/-num: 指定获取前num行
  -n -num: 排除后num行
#+END_SRC
#+BEGIN_SRC conf
tail [OPTION]... [FILE]...  # 读取文件尾
  -c num: 指定获取后num字节
  -n num/-num: 指定获取后num行
  -n +num: 排除第num行之前的行数
  -f: 跟踪显示文件新追加的内容；
#+END_SRC

** tr
转换或删除字符
#+BEGIN_SRC conf
tr [OPTION]... SET1 [SET2]
  -d: 删除SET1中的字符(默认为转换为SET2对应的字符)
#+END_SRC

** wc
行数 单词 字节
#+BEGIN_SRC conf
wc [OPTION]... [FILE]...
  -l: lines
  -w: words
  -c: characters
#+END_SRC

** cut
通过分隔符切割后显示指定字段
#+BEGIN_SRC conf
cut [OPTION]... [FILE]...
  -d DELIMITER: 指定分隔符(默认为制表符)
  -f FILEDS: 指定字段，如 1-3,7
  --output-delimiter=STRING: 指定输出分隔符
#+END_SRC

** sort
排序
#+BEGIN_SRC conf
sort [OPTION]... [FILE]...
  -f: 忽略字符大小写
  -r: 逆序
  -t DELIMITER: 字段分隔符
  -k num: 以指定字段为标准排序
  -n: 以数值大小进行排序
  -u: uniq，排序后去重
#+END_SRC

** uniq
去除连续且完全相同的行
#+BEGIN_SRC conf
uniq [OPTION]... [FILE]...
  -c: 显示每行重复出现的次数；
  -d: 仅显示重复过的行；
  -u: 仅显示不曾重复的行；
#+END_SRC

** grep
- grep是一个文本搜索工具，根据用户指定的“模式pattern”对目标文本逐行进行匹配检查，打印匹配到的行
- grep工具有三种: 
  - grep支持基础正则表达式
  - egrep相当于 =grep -E= ，用于扩展正则表达式
  - fgrep不支持正则表达时，但匹配速度快
#+BEGIN_SRC conf
grep [OPTIONS] PATTERN [FILE...]
  -E: 使用扩展正则表达式ERE

  -v: 显示不能够被pattern匹配到的行
  -i: ignore 忽略字符大小写
  -o: only 仅显示匹配到的字符串
  -q: quite 静默模式，不输出任何信息(后边可以检查$?来检查是否匹配到)
  
  -r: 同时搜索目录的子目录

  -A num: after, 匹配的行同时显示其后num行
  -B num: before, 匹配的行同时显示其前num行
  -C num: context, 匹配的行同时显示其前后num行

  --color=auto: 对匹配到的文本着色显示
#+END_SRC
** sed
- sed: Stream EDitor，是一个行编辑器
- sed有两个缓存空间：模式空间和保持空间
- sed每次读取文件的一行到模式空间中处理，结束时将模式空间的内容输出至屏幕
#+BEGIN_SRC conf
sed [option]... 'script' inputfile...
  -n: 不输出模式空间中的内容至屏幕
  -e: 多点编辑
  -f /PATH/TO/SCRIPT_FILE: 从指定文件中读取编辑脚本
  -r: 支持使用扩展正则表达式
  -i: 原文件编辑
   
  script格式: 地址+命令，多条命令用;隔开，命令可以使用{}括起多条命令
#+END_SRC
- 地址定界
  1. 不给地址：对全文进行处理
  2. 单地址：
     - #: 指定的行
     - /pattern/：被此处模式所能够匹配到的每一行
  3. 地址范围：
     - =#,#=
     - =#,+#=
     - =/pat1/,/pat2/=
     - =#,/pat1/=
  4. ~：步进 (first~step)
- 编辑命令
  - !: 取反条件，放在编辑命令之前
  - d: 删除
  - p: 显示模式空间中的内容(一般配合-n使用)
  - a \text：在行后面追加新行(支持使用\n实现多行追加)
  - i \text：在行前面插入文本(支持使用\n实现多行插入)
  - c \text：替换行(同时替换地址范围所有行)为单行或多行文本
  - w /path/to/somefile: 保存模式空间匹配到的行至指定文件中
  - r /path/from/somefile：读取指定文件的文本流至模式空间中匹配到的行的行后
  - =: 为模式空间中的行打印行号
  - l: 打印行中的特殊字符
  - y/inchars/outchars/: 转换命令，对inchars中的字符替换成outchars对应的字符
  - s///NUM：查找替换第NUM个(默认为1)匹配
    - 替换内容中使用 & 来代表所匹配的内容
    - 替换标记
      - g: 行内全局替换
      - p: 显示替换成功的行
      - w /PATH/TO/SOMEFILE：将替换成功的结果保存至指定文件中
- 高级编辑命令
  - h: 把模式空间中的内容覆盖至保持空间中
  - H：把模式空间中的内容追加至保持空间中
  - g: 从保持空间取出数据覆盖至模式空间
  - G：从保持空间取出内容追加至模式空间
  - x: 把模式空间中的内容与保持空间中的内容进行互换
  - n: 输出模式空间的内容，读取匹配到的行的下一行至模式空间
  - N：追加匹配到的行的下一行至模式空间，若到没有下一行可读，则立即停止程序
  - d: 删除模式空间中的所有行
  - D：删除模式空间中的第一行，即删除到第一个换行符
- 改变流
  - D: D命令删除第一行后会强制sed返回脚本顶部，而不读取新的行
  - b [label]: 跳转到label标签的位置，若省略则跳转到脚本结尾
    - 标签的位置通过 =:label= 来指定
    #+BEGIN_SRC sh
    :start
    s/,//1p
    /,/b start  # 使用地址模式避免死循环
    #+END_SRC
  - t [label]: 检查最近一次替换是否成功，成功则跳转到标签位置或脚本结尾，失败则继续执行脚本

** TODO awk
- 文本报告生成器

