#+TITLE: OpenSSL
#+DATE: 2016-06-26
#+SETUPFILE: ~/myblog/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: 服务器
#+JEKYLL_TAGS: Linux 安全
#+JEKYLL_PUBLISHED: true

* 加密算法和协议
- 对称加密 :: 加密和解密使用同一个密钥
  - 常见算法: =DES=, =3DES=, =AES=, =blowfish=
  - 特性: 将原始数据分割成固定大小的块，逐个进行加密
  - 缺陷: 密钥过多，密钥需要共享
- 公钥加密(非对称加密) ::
  - 公钥( =pubkey= ): 公开给所有人
  - 私钥( =secret key=): 自己留存，必须保证其私密性
  - 特点: 用公钥加密的数据，只能使用与之配对的私钥解密，反之亦然
  - 功能
    - =数字签名=: 主要在于让接收方确认发送方身份，因为私钥只有发送方有
    - =密钥交换=: 发送方用对方的公钥加密一个对称密钥，并发送给对方
    - =数据加密=
  - 常见算法: =RSA=, =DSA=, =ELGamal=
    : DSA仅用于数字签名的功能
  : DH算法: 用于解决公钥交换的安全性
  : 1. A知道数字p,g,x，B知道数字p,g,y，即p,g是公开的
  : 2. A发送p^x%g给B，B发送p^y%g给A，之后两人使用的密钥就是p^xy%g
- 单向加密 :: 只能加密，不能解密，用于提取数据指纹
  - 特性: 定长输出，雪崩效应
  - 常见算法: =md5=, =sha1=, =sha224=, =sha256=, =sha384=, =sha512=
  - 功能: 保证数据完整性
  - =MAC(Message Authentication Code)=: 单向加密的一种延伸应用，用于实现在网络通信中保证所传输的数据的完整性
- 认证协议 :: 使用用户名和密码进行认证
* SSL与TLS
- =SSL=: Secure Socket Layer
- =TLS=: Transport Layer Security，相当于SSL的升级版
- 特性: 在TCP/IP的应用层和传输层之间加了一层加密处理
- 该协议设计上也使用了分层设计
* OpenSSL
** 组件
- =openssl=: 多用途的命令行工具
- =libcrypto=: 公共加密解密库
- =libssl=: 实现了ssl和tls的库
** openssl命令
#+BEGIN_SRC yaml
openssl COMMAND
  version: 查询程序版本号
  ca: 建立私有CA
#+END_SRC
- 对称加密 ::
  #+BEGIN_SRC bash
  openssl enc -e -des3 -a -in FILE_INPUT -out FILE_OUTPUT -pass pass:PASSWORD  # 对称加密
  openssl enc -d -des3 -a -in FILE_INPUT -out FILE_OUTPUT -pass pass:PASSWORD  # 对称解密
  #+END_SRC
- 单向加密 ::
  #+BEGIN_SRC bash
  openssl dgst -md5 /PATH/TO/SOMEFILE  # 进行单向加密
  #+END_SRC
- 非对称加密 ::
  #+BEGIN_SRC bash
  openssl genrsa -out key.pri 2048  # 生成私钥
  openssl rsa -in key.pri -pubout  # 通过私钥生成公钥
  #+END_SRC
- 其他操作 :: 
  #+BEGIN_SRC bash
  openssl passwd -1 -salt 密码杂质  # 生成用户密码
  #+END_SRC
  #+BEGIN_SRC bash
  openssl rand -{hex|base64} NUM  # 生成NUM个字节的随机字符串
  #+END_SRC
** 私有CA
*** PKI
=PKI=: Public Key Infrastructure
- 签证机构: =CA= ，通过该机构来验证公钥的作者
- 注册机构: =RA=
- 证书吊销列表: =CRL= 
- 证书存取库: 所有可信的CA公钥会放在所有用户电脑上
- 证书结构和认证协议标准: =X.509=
*** 证书的申请和签署过程
1. 生成申请请求
2. RA核验
3. CA签署
4. 获取证书
*** 创建私有CA
openssl配置文件: =/etc/pki/tls/openssl.cnf=
1. 创建所需要的文件
   #+BEGIN_SRC bash
   cd /etc/pki/CA
   touch index.txt  # 存储所有证书的索引信息
   echo 01 > serial  # 证书的编号
   #+END_SRC
2. CA自签证书
   #+BEGIN_SRC yaml
   (umask 077; openssl genrsa -out /etc/pki/CA/private/cakey.pem 2048)  # 客户端需要使用该私钥所对应的公钥
   openssl req -new -x509 -key /etc/pki/CA/private/cakey.epm -days 7300 -out /etc/pki/CA/cacert.pem
     -new: 生成新证书签署请求
     -x509: 专用于CA生成自签证书
     -key: 生成请求时用到的私钥文件
     -days n: 证书的有效期限
     -out /PATH/TO/SOMECERTFILE: 证书的保存路径
   #+END_SRC
3. 发证
   1. 用到证书的主机生成证书请求
      #+BEGIN_SRC bash
      (umask 077; openssl genrsa -out /etc/httpd/ssl/httpd.key 2048)
      openssl req -new -key /etc/httpd/ssl/httpd.key -days 365 -out /etc/httpd/ssl/httpd.csr
      #+END_SRC
   2. 把请求文件传输给CA
   3. CA签署证书，并将证书发还给请求者
      #+BEGIN_SRC bash
      openssl ca -in /tmp/httpd.csr -out /etc/pki/CA/certs/httpd.crt -days 365
      openssl x509 -in /PATH/FROM/CERT_FILE -noout -text|-subject|-serial  # 查看证书中的信息
      #+END_SRC
4. 吊销证书
   1. 客户端获取要吊销的证书的serial
      #+BEGIN_SRC bash
      openssl x509 -in /PATH/FROM/CERT_FILE -noout -serial -subject
      #+END_SRC
   2. CA
      1. 对比客户提交的serial与subject信息是否与index.txt的信息一致
      2. 吊销证书
         #+BEGIN_SRC bash
         openssl ca -revoke /etc/pki/CA/newcerts/SERIAL.pem
         #+END_SRC
      3. 生成吊销证书编号
         #+BEGIN_SRC bash
         echo 01 > /etc/pki/CA/crlnumber
         #+END_SRC
      4. 更新证书吊销列表
         #+BEGIN_SRC bash
         openssl ca -gencrl -out thisca.crl
         openssl crl -in /PATH/FROM/CRL_FILE.crl -noout -text  # 查看crl文件
         #+END_SRC
