#+TITLE: OpenSSL
#+DATE: 2016-06-23
#+SETUPFILE: ~/myblog/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: Linux
#+JEKYLL_TAGS: Linux 运维 安全
#+JEKYLL_PUBLISHED: true

* 安全
** 安全攻击
- 被动攻击：窃听
- 主动攻击：伪装、重放、消息篡改、拒绝服务
** 安全机制
加密、数字签名、访问控制、数据完整性、认证交换、流量填充、路由控制、公证
** 安全服务
- 认证
- 访问控制
- 数据保密性
  - 连接保密性
  - 无连接保密性
  - 选择域保密性
  - 流量保密性
- 数据完整性
- 不可否认性
** 加密算法和协议
- 对称加密: 加密和解密使用同一个密钥
  - 常见算法: DES, 3DES, AES
  - 特性: 将原始数据分割成固定大小的块，逐个进行加密
  - 缺陷：密钥过多，密钥需要共享
- 公钥加密(非对称加密)
  - 公钥: 公开给所有人(pubkey)
  - 私钥: 自己留存，必须保证其私密性(secret key)
  - 特点: 用公钥加密的数据，只能使用与之配对儿的私钥解密，反之亦然
  - 功能
    - 数字签名: 主要在于让接收方确认发送方身份，因为私钥只有发送方有
    - 密钥交换: 发送方用对方的公钥加密一个对称密钥，并发送给对方
    - 数据加密
  - 常见算法：RSA, DSA, ELGamal
    - DSA仅用于数字签名的功能
  - DH算法: 用于解决公钥的安全性
    1. A知道数字p,g,x，B知道数字p,g,y，即p,g是公开的
    2. A发送p^x%g给B，B发送p^y%g给A，之后两人使用的密钥就是p^xy%g
- PKI: Public Key Infrastructure
  - 签证机构: CA，通过该机构来验证公钥的作者
  - 注册机构: RA
  - 证书吊销列表: CRL
  - 证书存取库: 所有可信公钥会放在所有用户电脑上
  - 证书结构和认证协议标准: X.509
  - https访问过程
    1. 建立TCP连接
    2. 获得网站的证书，检查证书名是否与服务器主机名相同，同时证书不在CRL中
    3. 客户端生成对称加密密钥用对方的公钥进行加密，然后发送给对方
    4. 通过对称加密密钥进行加密传输数据
- 单向加密: 只能加密，不能解密，用于提取数据指纹
  - 特性: 定长输出，雪崩效应
  - 常见算法: md5, sha1, sha224, sha256, sha384, sha512
  - 功能: 保证数据完整性
  - MAC: Message Authentication Code，单向加密的一种延伸应用，用于实现在网络通信中保证所传输的数据的完整性
- 认证协议: 即用用户名和密码
** SSL与TLS
- SSL: Secure Socket Layer
- TLS: Transport Layer Security，相当于SSL的升级版
- 特性: 在TCP/IP的应用层和传输层之间加了一层加密处理
- 该协议设计上也使用了分层设计
* OpenSSL
** 组件
- openssl: 多用途的命令行工具
- libcrypto: 公共加密库
- libssl: 实现了ssl和tls的库
** openssl命令
#+BEGIN_SRC conf
openssl COMMAND
  version: 查询程序版本号
  ca: 建立私有CA

openssl enc -e -des3 -a -salt -in FILE_INPUT -out FILE_OUTPUT  # 对称加密
openssl enc -d -des3 -a -salt -in FILE_INPUT -out FILE_OUTPUT  # 对称解密

openssl dgst -md5 /PATH/TO/SOMEFILE  # 进行单向加密

openssl passwd -1 -salt 密码杂质  # 生成用户密码

openssl rand -{hex|base64} NUM  # 生成NUM个字节的随机字符串

openssl genrsa -out key.pri 2048  # 生成私钥
openssl rsa -in key.pri -pubout  # 通过私钥生成公钥
#+END_SRC
