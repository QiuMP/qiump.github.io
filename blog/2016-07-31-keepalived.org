#+TITLE: Keepalived
#+DATE: 2016-07-31
#+SETUPFILE: ~/myblog/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: 服务器
#+JEKYLL_TAGS: Linux 集群
#+JEKYLL_PUBLISHED: true


* 相关概念
- =MASTER=: 活动节点
- =BACKUP=: 备用节点
- =HA Service=: 由多个主机resources组成
- =NTP=: network time protocol，节点的状态确认需要同步时间
- =VRRP=: virtual route redundent protocol，Keepalived所实现的协议名，通过虚拟一个路由来对VIP进行调度
* Keepalived的主要组件
- =VRRP Stack=: vrrp协议在Linux主机上以守护进程方式的实现
- =ipvs wrapper=: 能够根据配置文件自动生成ipvs规则
- =Checkers=: 对各RS做健康状态检测
* 配置
** 配置文件的组成部分
- GLOBAL CONFIGURATION ::
  - 设置通知邮箱
  - 设置路由ID
- VRRPD CONFIGURATION ::
  - vrrp instance
  - vrrp synchonization group: 用于适应LVS-NAT
- LVS CONFIGURATION ::
  - virtual server
** 配置前提
- 本机的主机名，要与 =hostname(uname -n)= 获得的名称保持一致
- 各节点要能互相解析主机名: 一般建议通过 =hosts= 文件进行解析
- 各节点时间同步
  #+BEGIN_SRC yaml
  ntpdate IP  # 通过时间服务器进行同步
  #+END_SRC
- 确保iptables及selinux不会成为服务阻碍
** 全局设置
#+BEGIN_SRC bash
global_defs {
    notification_email {  # 邮件收件人
        root@localhost
    }
    notification_email_from kaadmin@localhost  # 邮件发件人
    smtp_server 127.0.0.1  # 设置smtp服务器
    smtp_connect_timeout 30
    router_id HOSTNAME  # 路由ID
}
#+END_SRC
** VRRP设置

- Nginx集群和LVS-DR ::
  对于Nginx集群和LVS-DR的路由，DIP并不需要随着VIP的流动而流动，因为Nginx是通过反向代理来进行负载均衡的，报文的源地址是自己。因此只需要对VIP进行路由即可
  - 通过定义多个 =vrrp_instance= 和 =DNS解析= 的配合来实现高可用的负载均衡组，即使用每个director使用不同的IP，当有一个director出问题时会将其ip转移到正常的director上
  #+BEGIN_SRC bash
  vrrp_script chk_nginx {  # 定义脚本来监控本机的Nginx
      script "killall -0 nginx"  # 检测进程是否存在，可以使用shell脚本文件
      interval 1  # 每隔多少秒实行一次
      weight -20  # 脚本执行失败时的操作，权重减20
  }

  vrrp_instance VI_1 {  # 定义虚拟路由
      state {MASTER|BACKUP}  # 定义主机在该虚拟路由下的属性
      interface eth0
      virtual_router_id 144  # 需要唯一和统一，虚拟路由会自动以该ID生成网卡Mac后两位
      # nopreempt  # 启用非抢占模式，即当活动服务器失效时才启用备用服务器
      priority 100  # 当有多个MASTER时根据优先级进行抢占
      advert_int 1  # 通告自己状态的时间间隔(单位:秒)
      # vrrp_mcast_group4 224.0.1.118  # 多播组地址，防止相互干扰，每个虚拟路由需要不同的地址
      authentication {  # 认证方法
          auth_type PASS  # 简单字符认证，可以用MD5但效率会降低
          auth_pass 84ae57f7f4f6  # 认证字符串
      }
      virtual_ipaddress {  # 虚拟IP地址
          <IPADDR>/<MASK> [brd <IPADDR> dev <STRING> scope <SCOPE> label <LABEL>]
          172.16.100.88/16 dev eth0 label eth0:1  # 对VIP进行路由
      }

      track_script {
          chk_nginx  # 绑定脚本
      }

      # 虚拟路由发生改变时发送通知，也可用于重启服务
      notify_master "/etc/keepalived/notify.sh master"  # 当前节点成为MASTER时
      notify_backup "/etc/keepalived/notify.sh backup"  # 当前节点成为BACKUP时
      notify_fault "/etc/keepalived/notify.sh fault"  # 当前节点成为FAULT时
  }
  #+END_SRC
- LVS-NAT集群 ::
  对于LVS-NAT来说，由于转发的报文不需要更改源地址，内部的RS通过设定Director为网关来实现，所以DIP需要随着VIP的流动而流动，因此需要对VIP和DIP都定义路由
  #+BEGIN_SRC bash
  vrrp_sync_group VG_1 {  # 定义同步组
      group {
          VI_1  # 通过vrrp_instance定义VIP 
          VI_2  # 通过vrrp_instance定义DIP
      }
  }
  #+END_SRC
** 发送通知脚本
#+BEGIN_SRC bash
#!/bin/bash
# 
vip=172.16.100.88
contact='root@localhost'

notify() {
    mailsubject="`hostname` to be $1: $vip floating"
    mailbody="`date '+%F %H:%M:%S'`: vrrp transition, `hostname` changed to be $1"
    echo $mailbody | mail -s "$mailsubject" $contact
}

case "$1" in
    master)
        notify master
        exit 0
    ;;
    backup)
        notify backup
        exit 0
    ;;
    fault)
        notify fault
        exit 0
    ;;
    *)
        echo 'Usage: `basename $0` {master|backup|fault}'
        exit 1
    ;;
esac        
#+END_SRC
** 利用Keepalived设定ipvs
#+BEGIN_SRC bash
virtual_server 172.16.100.88 80 {  # 可以使用防火墙标记fwmark
    delay_loop 6  # 健康状态检查的间隔时间

    lb_algo {rr|wrr|lc|wlc|lblc|sh|dh}
    lb_kind {NAT|DR|TUN}

    protocol TCP
    nat_mask 255.255.0.0

    persistence_timeout 0  # 保持时间

    sorry_server 127.0.0.1 80  # 所有RS下线时显示的页面
    real_server 172.16.100.6 80 {
        # notify_up ...  # 上线通知
        # notify_down ...  # 下线通知
        weight 1
        HTTP_GET|SSL_GET {  # 健康状态检测方式
            url {
                path /
                status_code 200  # 网页状态检测
                digest ...  # 使用genhash对网页内容进行校验
            }
            connect_timeout 3  # 连接超时时间
            nb_get_retry 3  # 重试次数
            delay_before_retry 3  # 重试前的等待时间
        }
        
        # TCP_CHECK {  # 使用TCP检测目标端口的方式
        #     connect_timeout 3
        # }
    }
    real_server 172.16.100.69 80 {
        weight 2
        HTTP_GET {
            url {
              path /
              status_code 200 
            }
            connect_timeout 3
            nb_get_retry 3
            delay_before_retry 3
        }
    }
}
#+END_SRC
