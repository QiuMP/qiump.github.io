#+TITLE: LVS
#+DATE: 2016-07-26
#+SETUPFILE: ~/myblog/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: 服务器
#+JEKYLL_TAGS: Linux 负载均衡
#+JEKYLL_PUBLISHED: true

* lvs
=lvs=: Linux Virtual Server，根据请求报文的目标IP和PORT将其转发至后端主机集群中的某一台主机(根据挑选算法)，支持 =TCP=, =UDP=, =AH=, =ESP=, =AH_ESP=, =SCTP= 等诸多协议
* lvs组件
- =ipvsadm=: 用户空间的命令行工具，用于管理集群服务 =ipvs=
- =ipvs=: 工作内核中 =netfilter= 的 =INPUT= 钩子上，此时报文传输线路为 =PREROUTING= > =INPUT= > =POSTROUTING=
* lvs类型
- lvs-nat :: 多目标的DNAT，它通过修改请求报文的目标IP地址(同时可能会修改目标端口)至某RS的RIP地址实现转发
  - RIP和DIP应该使用私网地址，且RS的网关要指向DIP，因为需要进行NAT
  - 请求和响应报文都要经由director转发，在极高负载的场景中，director可能会成为系统瓶颈
  - 支持端口映射
  - RS可以使用任意OS
- lvs-dr :: direct routing(默认)，它通过修改请求报文的目标MAC地址进行转发，仅请求报文经由director，响应报文是由RS直接响应给Client
  - Driector使用VIP、DIP；RS使用RIP、VIP
  - 保证前端路由器将目标IP为VIP的请求报文发送给director，可以通过路由静态绑定，或者使用arptables使RS拒绝响应，也可以直接修改RS主机内核的参数
  - RS的RIP可以使用私有地址，但也可以使用公网地址
  - RS跟Director必须在同一物理网络中
  - 请求报文经由Director调度，但响应报文一定不能经由Director
  - 不支持端口映射
  - RS可以是大多数OS
  - RS通过地址为VIP的lo设备进行发送报文
  - RS的网关不能指向DIP，应指向外网路由
- lvs-tun :: 不修改请求报文的IP首部，而是通过在原有的IP首部(CIP,VIP)之外，再封装一个IP首部(DIP,RIP)，即IPIP
  - RIP、DIP、VIP都是公网地址
  - RS通过地址为VIP的lo设备接受和发送报文
  - 请求报文必须经由director调度，但响应报文一定不能经由director
  - 不支持端口映射
  - RS的OS必须支持隧道功能
  - 必要时需要限制请求报文的MTU大小
- lvs-fullnat :: director通过同时修改请求报文的目标地址和源地址进行转发，类似于反向代理，需要使用淘宝开源项目进行支持
  - VIP是公网地址；RIP和DIP是私网地址，二者无须在同一网络中
  - RS接收到的请求报文的源地址为DIP
  - 请求报文和响应报文都必须经由Director
  - 支持端口映射机制
  - RS可以使用任意OS
* lvs scheduler
=scheduler= 是Director通过算法来选择要调度的RS
- 静态方法 :: 仅根据算法本身进行调度
  - =RR(round robin)=: 轮调
  - =WRR(weighted rr)=: 按照权重分配
  - =SH(source hash)=: 将来自于同一个IP的请求始终调度至同一RS，实现session保持的机制，但只适用于同个端口
  - =DH(destination hash)=: 将对同一个目标的请求始终发往同一个RS，对于新目标使用轮调分配，用于正向代理情形下的缓存服务器调度
- 动态方法 :: 根据算法计算各RS的当前负载状态(Overhead)进行调度，其中Active是活动连接数，Inactive是非活动连接数
  - =LC(Least Connection)=: Overhead=Active*256+Inactive
  - =WLC(Weighted LC)=: Overhead=(Active*256+Inactive)/weight
  - =SED(Shortest Expection Delay)=: Overhead=(Active+1)*256/weight，解决WLC下0连接数时的分配
  - =NQ(Never Queue)=: SED算法的改进，优先分配给0连接数的RS
  - =LBLC(Locality-Based LC)=: 动态的DH算法，对于新目标使用LC分配，用于正向代理情形下的缓存服务器调度
  - =LBLCR(Locality-Based Least-Connection with Replication)=: 带复制功能的LBLC算法
* lvs架构
1. 一个ipvs主机可以同时定义多个cluster service
2. 一个cluster service上至少应该一个real server
* ipvsadm的用法
** 管理集群服务
#+BEGIN_SRC yaml
ipvsadm -A service [-s scheduler] [-p SECOND] # APPEND
ipvsadm -D service  # DELETE
  service:
    tcp: -t ip:port (port为0时代表所有端口)
    udp: -u ip:port
    fwm: -f mark，检测在PREROUTING上的标记，用于合并多个服务(端口)

  -s scheduler: 默认为WLC
  -p SCEOND: lvs persistence，设置持续连接时间
#+END_SRC
** 管理集群服务中的RS
#+BEGIN_SRC yaml
ipvsadm -a service -r server-address lvs-type [-w weight]
ipvsadm -d service -r server-address
  server-address: RS的地址，ip[:port]

  lvs-type:
    -g: GATEWAY, lvs-dr(默认)
    -i: IPIP, lvs-tun
    -m: MASQUERADE, lvs-nat

  -w weight: 设置RS的权重，当权重为0时不会调用该RS
#+END_SRC
** 清空规则
#+BEGIN_SRC yaml
ipvsadm -C  
#+END_SRC
** 查询规则
#+BEGIN_SRC yaml
ipvsadm -L|l [options]	
  -n: numeric，基于数字格式显示地址和端口
  -c: connection，显示ipvs连接
  --stats: 统计数据
  --rate: 速率
  --exact: 精确值		
#+END_SRC
** 保存和重载
#+BEGIN_SRC yaml
ipvsadm -R < FILE
ipvsadm -S [-n] > FILE
#+END_SRC
* 配置lvs-dr
- 内核参数 ::
  - =arp_ignore=: 是否响应别人的ARP广播请求
    - =0=: 检查自己的所有接口的地址
    - =1=: 检查同一接口上的地址
  - =arp_announce=: 是否进行ARP通告
    - =0=: 通告自己所有接口的地址
    - =1=: 尽量避免通告不在同一接口的地址
    - =2=: 不通告不在同一接口的地址
- director配置 ::
  #+BEGIN_SRC bash
  # ifconfig eno16777736:0 172.16.100.10/32 broadcast 172.16.100.10 up
  ip addr add 172.16.100.10/32 dev eno16777736  # 配置VIP
  # route add -host 172.16.100.10 dev eno16777736:0
  ip route add 172.16.100.10 dev eno16777736
  
  ipvsadm -A -t 172.16.100.10:80
  ipvsadm -a -t 172.16.100.10:80 -r 172.16.100.21 -g  # 添加RS
  #+END_SRC
- RS配置 ::
  #+BEGIN_SRC bash
  echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore 
  echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce 

  ifconfig lo:0 172.16.100.10/32 broadcast 172.16.100.10 up  # 为lo设备添加VIP
  route add -host 172.16.100.10 dev lo:0  # 为目标地址为vip的报文指定lo设备
  #+END_SRC
* 通过FWM定义集群
1. 在director上netfilter的mangle表的PREROUTING定义MARK
   #+BEGIN_SRC bash
   iptables -t mangle -A PREROUTING -d $vip -p $protocol --dports $port -j MARK --set-mark mark_num
   #+END_SRC
2. 基于FWM(Firewall Mark)定义集群服务
   #+BEGIN_SRC bash
   ipvsadm -A -f mark_num -s scheduler
   #+END_SRC
* lvs persistence
lvs持久连接: 无论ipvs使用何种调度方法，其都能实现将来自于同一个Client的请求始终定向至第一次调度时挑选出的RS，这需要通过维护一个持久连接表来实现，这个表内容包含 =SIP=, =RS=, =time=
- 持久连接的实现方式 ::
  - =每端口持久=: PPC，单服务持久调度
  - =每FWM持久=: PFWMC，单FWM持久调度
  - =每客户端持久=: PCC，所有端口持久调度，即定义集群服务时把端口定义为0
* 实现调用RS的高可用
director可以对RS做健康状态检测，并且根据检测的结果自动完成添加或移除等管理功能，不过LVS并没有提供这一功能，需要使用 =keepalived= 实现
- 基于协议层次检查: 层次越低，效率越高，精确度越低
  : ip: icmp
  : 传输层: 检测端口的开放状态
  : 应用层: 请求获取关键性的资源
- 检查频度
- 状态判断: 需要多次检测服务器来确定服务器是否失效
- 配置一个网页故障时所显示的页面的服务器
