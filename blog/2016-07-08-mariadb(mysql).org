#+TITLE: MariaDB(MySQL)数据库
#+DATE: 2016-07-08
#+SETUPFILE: ~/myblog/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: 数据库
#+JEKYLL_TAGS: 运维 数据库 MySQL
#+JEKYLL_PUBLISHED: true

TODO




-----
* 数据库相关知识
** 数据结构模型
- 层次模型: 树状结构
- 网状结构
- 关系模型
  - 将数据组织成二维关系: row,column
  - 关系模型的分类
    - 关系模型
    - 实体-关系模型
    - 基于对象的关系模型
    - 半结构化的关系模型
- 数据库管理系统: DBMS
  - 关系型数据库管理系统: RDBMS
** RDMBS设计范式
设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。
1) 第一范式(1NF)
   所谓第一范式(1NF)是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式(1NF)表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。
2) 第二范式(2NF)
   第二范式(2NF)要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。
3) 第三范式(3NF)
   第三范式(3NF)是第二范式(2NF)的一个子集，即满足第三范式(3NF)必须满足第二范式(2NF)。简而言之，第三范式(3NF)要求一个关系中不包含已在其它关系已包含的非主关键字信息。简而言之，第三范式就是属性不依赖于其它非主属性，也就是在满足2NF的基础上，任何非主属性不得传递依赖于主属性。
** 事务
事务（Transaction）是并发控制的单位，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位。
- 事务的特性
  - A: 原子性，整个事务是一个整体
  - C：一致性，一个状态转换到另一个状态
  - I: 隔离性，一个事务的执行不能被其他事务干扰
  - D：持久性，一个事务一旦提交，它对数据库中数据的改变就应该是永久性的
** 数据存储协议
数据存储协议是一个C/S架构的应用层协议
- Server: 监听于套拼字，接收并处理客户端的应用请求
- Client
  - 程序接口: CLI、GUI
  - 应用编程接口: ODBC(Open DataBase Connection)
** 数据基础概念
*** 约束
约束(constraint): 向数据表提供的数据要遵守的限制
- 主键：一个或多个字段的组合，填入的数据必须能在本表中唯一标识本行，NOT NULL，且一个表只能存在一个
- 唯一键：一个或多个字段的组合，填入的数据必须能在本表中唯一标识本行，允许为NULL
- 外键：一个表中的某字段可填入数据取决于另一个表的主键已有的数据
- 检查性：数据的表达式限制
*** 索引
索引：将表中的一个或多个字段中的数据复制一份另存，并且此些需要按特定次序排序存储
*** 关系运算
- 选择：挑选出符合条件的行
- 投影：挑选出需要的字段
- 连接：根据条件连接多个表
** 数据抽象
- 物理层：决定数据的存储格式，即RDBMS在磁盘上如何组织文件
- 逻辑层：描述DB存储什么数据，以及数据间存在什么样的关系
- 视图层：描述DB中的部分数据

* SQL
** SQL基础概念
SQL(Structure Query Language)是一个结构化查询语言，通过SQL解释器执行


* MariaDB
